{"ast":null,"code":"import { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i11 from '@angular/material/core';\nimport { MatOption } from '@angular/material/core';\nimport * as i12 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i10 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, tap, filter } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i8 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i9 from '@angular/material/divider';\nimport { MatDividerModule } from '@angular/material/divider';\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n\nconst _c0 = [\"searchSelectInput\"];\nconst _c1 = [\"innerSelectSearch\"];\n\nfunction MatSelectSearchComponent_mat_checkbox_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 9);\n    i0.ɵɵlistener(\"change\", function MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6._emitSelectAllBooleanToParent($event.checked));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r1.matFormField == null ? null : ctx_r1.matFormField.color)(\"checked\", ctx_r1.toggleAllCheckboxChecked)(\"indeterminate\", ctx_r1.toggleAllCheckboxIndeterminate)(\"matTooltip\", ctx_r1.toggleAllCheckboxTooltipMessage)(\"matTooltipPosition\", ctx_r1.toggleAllCheckboxTooltipPosition);\n  }\n}\n\nfunction MatSelectSearchComponent_mat_spinner_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 10);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 1, [\"*ngIf\", \"clearIcon; else defaultIcon\"]);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"svgIcon\", ctx_r10.closeSvgIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", !ctx_r10.closeSvgIcon ? ctx_r10.closeIcon : null, \" \");\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function MatSelectSearchComponent_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11._reset(true));\n    });\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_button_7_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_button_7_ng_template_2_Template, 2, 2, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r9 = i0.ɵɵreference(3);\n\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.clearIcon)(\"ngIfElse\", _r9);\n  }\n}\n\nfunction MatSelectSearchComponent_div_10_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2, [\"*ngIf\", \"noEntriesFound; else defaultNoEntriesFound\"]);\n  }\n}\n\nfunction MatSelectSearchComponent_div_10_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate(ctx_r15.noEntriesFoundLabel);\n  }\n}\n\nfunction MatSelectSearchComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_div_10_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_div_10_ng_template_2_Template, 1, 1, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r14 = i0.ɵɵreference(3);\n\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.noEntriesFound)(\"ngIfElse\", _r14);\n  }\n}\n\nconst _c2 = [[[\"\", 8, \"mat-select-search-custom-header-content\"]], [[\"\", \"ngxMatSelectSearchClear\", \"\"]], [[\"\", \"ngxMatSelectNoEntriesFound\", \"\"]]];\n\nconst _c3 = function (a0, a1) {\n  return {\n    \"mat-select-search-inner-multiple\": a0,\n    \"mat-select-search-inner-toggle-all\": a1\n  };\n};\n\nconst _c4 = [\".mat-select-search-custom-header-content\", \"[ngxMatSelectSearchClear]\", \"[ngxMatSelectNoEntriesFound]\"];\n\nclass MatSelectSearchClearDirective {}\n\nMatSelectSearchClearDirective.ɵfac = function MatSelectSearchClearDirective_Factory(t) {\n  return new (t || MatSelectSearchClearDirective)();\n};\n\nMatSelectSearchClearDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSelectSearchClearDirective,\n  selectors: [[\"\", \"ngxMatSelectSearchClear\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectSearchClearDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatSelectSearchClear]'\n    }]\n  }], null, null);\n})();\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\n\n\nconst configurableDefaultOptions = ['ariaLabel', 'clearSearchInput', 'closeIcon', 'closeSvgIcon', 'disableInitialFocus', 'disableScrollToActiveOnOptionsChanged', 'enableClearOnEscapePressed', 'hideClearSearchButton', 'noEntriesFoundLabel', 'placeholderLabel', 'preventHomeEndKeyPropagation', 'searching'];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\n\nconst MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\n\nclass MatSelectNoEntriesFoundDirective {}\n\nMatSelectNoEntriesFoundDirective.ɵfac = function MatSelectNoEntriesFoundDirective_Factory(t) {\n  return new (t || MatSelectNoEntriesFoundDirective)();\n};\n\nMatSelectNoEntriesFoundDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSelectNoEntriesFoundDirective,\n  selectors: [[\"\", \"ngxMatSelectNoEntriesFound\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectNoEntriesFoundDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxMatSelectNoEntriesFound]'\n    }]\n  }], null, null);\n})();\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/* tslint:disable:member-ordering component-selector */\n\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n\n\nclass MatSelectSearchComponent {\n  constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, matFormField = null, defaultOptions) {\n    this.matSelect = matSelect;\n    this.changeDetectorRef = changeDetectorRef;\n    this._viewportRuler = _viewportRuler;\n    this.matOption = matOption;\n    this.matFormField = matFormField;\n    /** Label of the search placeholder */\n\n    this.placeholderLabel = 'Suche';\n    /** Type of the search input field */\n\n    this.type = 'text';\n    /** Font-based icon used for displaying Close-Icon */\n\n    this.closeIcon = 'close';\n    /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n\n    this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n    /**\n      * Whether or not the search field should be cleared after the dropdown menu is closed.\n      * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n      */\n\n    this.clearSearchInput = true;\n    /** Whether to show the search-in-progress indicator */\n\n    this.searching = false;\n    /** Disables initial focusing of the input field */\n\n    this.disableInitialFocus = false;\n    /** Enable clear input on escape pressed */\n\n    this.enableClearOnEscapePressed = false;\n    /**\n     * Prevents home / end key being propagated to mat-select,\n     * allowing to move the cursor within the search input instead of navigating the options\n     */\n\n    this.preventHomeEndKeyPropagation = false;\n    /** Disables scrolling to active options when option list changes. Useful for server-side search */\n\n    this.disableScrollToActiveOnOptionsChanged = false;\n    /** Adds 508 screen reader support for search box */\n\n    this.ariaLabel = 'dropdown search';\n    /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n\n    this.showToggleAllCheckbox = false;\n    /** select all checkbox checked state */\n\n    this.toggleAllCheckboxChecked = false;\n    /** select all checkbox indeterminate state */\n\n    this.toggleAllCheckboxIndeterminate = false;\n    /** Display a message in a tooltip on the toggle-all checkbox */\n\n    this.toggleAllCheckboxTooltipMessage = '';\n    /** Define the position of the tooltip on the toggle-all checkbox. */\n\n    this.toggleAllCheckboxTooltipPosition = 'below';\n    /** Show/Hide the search clear button of the search input */\n\n    this.hideClearSearchButton = false;\n    /**\n     * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n     * Defaults to false, so selected options are only restored while filtering is active.\n     */\n\n    this.alwaysRestoreSelectedOptionsMulti = false;\n    /** Output emitter to send to parent component with the toggle all boolean */\n\n    this.toggleAll = new EventEmitter();\n\n    this.onTouched = _ => {};\n\n    this._options$ = new BehaviorSubject(null);\n    this.optionsList$ = this._options$.pipe(switchMap(_options => _options ? _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n    this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n    this._formControl = new FormControl('');\n    /** whether to show the no entries found message */\n\n    this._showNoEntriesFound$ = combineLatest([this._formControl.valueChanges, this.optionsLength$]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value && optionsLength === this.getOptionsLengthOffset()));\n    /** Subject that emits when the component has been destroyed. */\n\n    this._onDestroy = new Subject();\n    this.applyDefaultOptions(defaultOptions);\n  }\n  /** Current search value */\n\n\n  get value() {\n    return this._formControl.value;\n  }\n  /** Reference to the MatSelect options */\n\n\n  set _options(_options) {\n    this._options$.next(_options);\n  }\n\n  get _options() {\n    return this._options$.getValue();\n  }\n\n  applyDefaultOptions(defaultOptions) {\n    if (!defaultOptions) {\n      return;\n    }\n\n    for (const key of configurableDefaultOptions) {\n      if (defaultOptions.hasOwnProperty(key)) {\n        this[key] = defaultOptions[key];\n      }\n    }\n  }\n\n  ngOnInit() {\n    // set custom mat-option class if the component was placed inside a mat-option\n    if (this.matOption) {\n      this.matOption.disabled = true;\n\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n\n      this.matOption._getHostElement().setAttribute('aria-hidden', 'true');\n    } else {\n      console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n    } // when the select dropdown panel is opened or closed\n\n\n    this.matSelect.openedChange.pipe(delay(1), takeUntil(this._onDestroy)).subscribe(opened => {\n      if (opened) {\n        this.updateInputWidth(); // focus the search field when opening\n\n        if (!this.disableInitialFocus) {\n          this._focus();\n        }\n      } else {\n        // clear it when closing\n        if (this.clearSearchInput) {\n          this._reset();\n        }\n      }\n    }); // set the first item active after the options changed\n\n    this.matSelect.openedChange.pipe(take(1), switchMap(_ => {\n      this._options = this.matSelect.options; // Closure variable for tracking the most recent first option.\n      // In order to avoid avoid causing the list to\n      // scroll to the top when options are added to the bottom of\n      // the list (eg: infinite scroll), we compare only\n      // the changes to the first options to determine if we\n      // should set the first item as active.\n      // This prevents unnecessary scrolling to the top of the list\n      // when options are appended, but allows the first item\n      // in the list to be set as active by default when there\n      // is no active selection\n\n      let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n\n      return this._options.changes.pipe(tap(() => {\n        // avoid \"expression has been changed\" error\n        setTimeout(() => {\n          // Convert the QueryList to an array\n          const options = this._options.toArray(); // The true first item is offset by 1\n\n\n          const currentFirstOption = options[this.getOptionsLengthOffset()];\n          const keyManager = this.matSelect._keyManager;\n\n          if (keyManager && this.matSelect.panelOpen) {\n            // set first item active and input width\n            // Check to see if the first option in these changes is different from the previous.\n            const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption); // CASE: The first option is different now.\n            // Indiciates we should set it as active and scroll to the top.\n\n            if (firstOptionIsChanged || !keyManager.activeItem || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n              keyManager.setFirstItemActive();\n            } // wait for panel width changes\n\n\n            setTimeout(() => {\n              this.updateInputWidth();\n            });\n          } // Update our reference\n\n\n          previousFirstOption = currentFirstOption;\n        });\n      }));\n    })).pipe(takeUntil(this._onDestroy)).subscribe(); // add or remove css class depending on whether to show the no entries found message\n    // note: this is hacky\n\n    this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n      // set no entries found class on mat option\n      if (this.matOption) {\n        if (showNoEntriesFound) {\n          this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n        } else {\n          this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n        }\n      }\n    }); // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n\n\n    this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      if (this.matSelect.panelOpen) {\n        this.updateInputWidth();\n      }\n    });\n\n    this.initMultipleHandling();\n    this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n      // update view when available options change\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  _emitSelectAllBooleanToParent(state) {\n    this.toggleAll.emit(state);\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n\n    this._onDestroy.complete();\n  }\n\n  _isToggleAllCheckboxVisible() {\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\n  }\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n\n\n  _handleKeydown(event) {\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n    if (event.key && event.key.length === 1 || event.keyCode >= A && event.keyCode <= Z || event.keyCode >= ZERO && event.keyCode <= NINE || event.keyCode === SPACE || this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END)) {\n      event.stopPropagation();\n    }\n\n    if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n      // Regain focus after multiselect, so we can further type\n      setTimeout(() => this._focus());\n    } // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n\n\n    if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n      this._reset(true);\n\n      event.stopPropagation();\n    }\n  }\n  /**\n   * Handles the key up event with MatSelect.\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n   */\n\n\n  _handleKeyup(event) {\n    if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n\n      const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n\n      if (index !== -1) {\n        this.unselectActiveDescendant();\n        this.activeDescendant = this._options.toArray()[index]._getHostElement();\n        this.activeDescendant.setAttribute('aria-selected', 'true');\n        this.searchSelectInput.nativeElement.setAttribute('aria-activedescendant', ariaActiveDescendantId);\n      }\n    }\n  }\n\n  writeValue(value) {\n    this._lastExternalInputValue = value;\n\n    this._formControl.setValue(value);\n\n    this.changeDetectorRef.markForCheck();\n  }\n\n  onBlur() {\n    this.unselectActiveDescendant();\n    this.onTouched();\n  }\n\n  registerOnChange(fn) {\n    this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * Focuses the search input field\n   */\n\n\n  _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    } // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n\n\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop; // focus\n\n    this.searchSelectInput.nativeElement.focus();\n    panel.scrollTop = scrollTop;\n  }\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n\n\n  _reset(focus) {\n    this._formControl.setValue('');\n\n    if (focus) {\n      this._focus();\n    }\n  }\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n\n\n  initMultipleHandling() {\n    if (!this.matSelect.ngControl) {\n      if (this.matSelect.multiple) {\n        // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n        // is necessary to properly work in multi-selection mode.\n        console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n      }\n\n      return;\n    } // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n\n\n    this.previousSelectedValues = this.matSelect.ngControl.value;\n    this.matSelect.ngControl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(values => {\n      let restoreSelectedValues = false;\n\n      if (this.matSelect.multiple) {\n        if ((this.alwaysRestoreSelectedOptionsMulti || this._formControl.value && this._formControl.value.length) && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n          if (!values || !Array.isArray(values)) {\n            values = [];\n          }\n\n          const optionValues = this.matSelect.options.map(option => option.value);\n          this.previousSelectedValues.forEach(previousValue => {\n            if (!values.some(v => this.matSelect.compareWith(v, previousValue)) && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n              // if a value that was selected before is deselected and not found in the options, it was deselected\n              // due to the filtering, so we restore it.\n              values.push(previousValue);\n              restoreSelectedValues = true;\n            }\n          });\n        }\n      }\n\n      this.previousSelectedValues = values;\n\n      if (restoreSelectedValues) {\n        this.matSelect._onChange(values);\n      }\n    });\n  }\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n\n\n  updateInputWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n\n    let element = this.innerSelectSearch.nativeElement;\n    let panelElement;\n\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n  /**\n   * Determine the offset to length that can be caused by the optional matOption used as a search input.\n   */\n\n\n  getOptionsLengthOffset() {\n    if (this.matOption) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  unselectActiveDescendant() {\n    var _a;\n\n    (_a = this.activeDescendant) === null || _a === void 0 ? void 0 : _a.removeAttribute('aria-selected');\n    this.searchSelectInput.nativeElement.removeAttribute('aria-activedescendant');\n  }\n\n}\n\nMatSelectSearchComponent.ɵfac = function MatSelectSearchComponent_Factory(t) {\n  return new (t || MatSelectSearchComponent)(i0.ɵɵdirectiveInject(MatSelect), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(MatOption, 8), i0.ɵɵdirectiveInject(MatFormField, 8), i0.ɵɵdirectiveInject(MAT_SELECTSEARCH_DEFAULT_OPTIONS, 8));\n};\n\nMatSelectSearchComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSelectSearchComponent,\n  selectors: [[\"ngx-mat-select-search\"]],\n  contentQueries: function MatSelectSearchComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatSelectSearchClearDirective, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatSelectNoEntriesFoundDirective, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clearIcon = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.noEntriesFound = _t.first);\n    }\n  },\n  viewQuery: function MatSelectSearchComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, ElementRef);\n      i0.ɵɵviewQuery(_c1, 7, ElementRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchSelectInput = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.innerSelectSearch = _t.first);\n    }\n  },\n  inputs: {\n    placeholderLabel: \"placeholderLabel\",\n    type: \"type\",\n    closeIcon: \"closeIcon\",\n    closeSvgIcon: \"closeSvgIcon\",\n    noEntriesFoundLabel: \"noEntriesFoundLabel\",\n    clearSearchInput: \"clearSearchInput\",\n    searching: \"searching\",\n    disableInitialFocus: \"disableInitialFocus\",\n    enableClearOnEscapePressed: \"enableClearOnEscapePressed\",\n    preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\",\n    disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\",\n    ariaLabel: \"ariaLabel\",\n    showToggleAllCheckbox: \"showToggleAllCheckbox\",\n    toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\",\n    toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\",\n    toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\",\n    toggleAllCheckboxTooltipPosition: \"toggleAllCheckboxTooltipPosition\",\n    hideClearSearchButton: \"hideClearSearchButton\",\n    alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\"\n  },\n  outputs: {\n    toggleAll: \"toggleAll\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSelectSearchComponent),\n    multi: true\n  }])],\n  ngContentSelectors: _c4,\n  decls: 12,\n  vars: 14,\n  consts: [[\"matInput\", \"\", 1, \"mat-select-search-input\", \"mat-select-search-hidden\"], [1, \"mat-select-search-inner\", \"mat-typography\", \"mat-datepicker-content\", \"mat-tab-header\", 3, \"ngClass\"], [\"innerSelectSearch\", \"\"], [\"class\", \"mat-select-search-toggle-all-checkbox\", \"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\", 4, \"ngIf\"], [\"autocomplete\", \"off\", 1, \"mat-select-search-input\", 3, \"type\", \"formControl\", \"placeholder\", \"keydown\", \"keyup\", \"blur\"], [\"searchSelectInput\", \"\"], [\"class\", \"mat-select-search-spinner\", \"diameter\", \"16\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"class\", \"mat-select-search-clear\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"mat-select-search-no-entries-found\", 4, \"ngIf\"], [\"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 1, \"mat-select-search-toggle-all-checkbox\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\"], [\"diameter\", \"16\", 1, \"mat-select-search-spinner\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 1, \"mat-select-search-clear\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultIcon\", \"\"], [3, \"svgIcon\"], [1, \"mat-select-search-no-entries-found\"], [\"defaultNoEntriesFound\", \"\"]],\n  template: function MatSelectSearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelement(0, \"input\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1, 2);\n      i0.ɵɵtemplate(3, MatSelectSearchComponent_mat_checkbox_3_Template, 1, 5, \"mat-checkbox\", 3);\n      i0.ɵɵelementStart(4, \"input\", 4, 5);\n      i0.ɵɵlistener(\"keydown\", function MatSelectSearchComponent_Template_input_keydown_4_listener($event) {\n        return ctx._handleKeydown($event);\n      })(\"keyup\", function MatSelectSearchComponent_Template_input_keyup_4_listener($event) {\n        return ctx._handleKeyup($event);\n      })(\"blur\", function MatSelectSearchComponent_Template_input_blur_4_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, MatSelectSearchComponent_mat_spinner_6_Template, 1, 0, \"mat-spinner\", 6);\n      i0.ɵɵtemplate(7, MatSelectSearchComponent_button_7_Template, 4, 2, \"button\", 7);\n      i0.ɵɵprojection(8);\n      i0.ɵɵelement(9, \"mat-divider\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, MatSelectSearchComponent_div_10_Template, 4, 2, \"div\", 8);\n      i0.ɵɵpipe(11, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(11, _c3, ctx.matSelect.multiple, ctx._isToggleAllCheckboxVisible()));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx._isToggleAllCheckboxVisible());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"type\", ctx.type)(\"formControl\", ctx._formControl)(\"placeholder\", ctx.placeholderLabel);\n      i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.searching);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.hideClearSearchButton && ctx.value && !ctx.searching);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(11, 9, ctx._showNoEntriesFound$));\n    }\n  },\n  dependencies: [i2.NgClass, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlDirective, i4.MatIconButton, i5.MatCheckbox, i6.MatIcon, i7.MatProgressSpinner, i8.MatTooltip, i9.MatDivider, i2.AsyncPipe],\n  styles: [\".mat-select-search-hidden[_ngcontent-%COMP%]{visibility:hidden}.mat-select-search-inner[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;z-index:100;font-size:inherit;box-shadow:none}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]{display:flex;align-items:center}.mat-select-search-input[_ngcontent-%COMP%]{box-sizing:border-box;width:100%;border:none;font-family:inherit;font-size:inherit;color:currentColor;outline:none;background:none;padding:0 44px 0 16px;height:calc(3em - 1px);line-height:calc(3em - 1px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-right:16px;padding-left:44px}.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-left:5px}.mat-select-search-no-entries-found[_ngcontent-%COMP%]{padding-top:8px}.mat-select-search-clear[_ngcontent-%COMP%]{position:absolute;right:4px;top:0}[dir=rtl][_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{right:auto;left:4px}.mat-select-search-spinner[_ngcontent-%COMP%]{position:absolute;right:16px;top:calc(50% - 8px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%]{right:auto;left:16px}  .mat-mdc-option[aria-disabled=true].contains-mat-select-search{position:sticky;top:-8px;z-index:1;opacity:1;margin-top:-8px;pointer-events:all}  .mat-mdc-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}  .mat-mdc-option[aria-disabled=true].contains-mat-select-search mat-pseudo-checkbox{display:none}  .mat-mdc-option[aria-disabled=true].contains-mat-select-search .mdc-list-item__primary-text{opacity:1}.mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:5px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:0;padding-right:5px}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectSearchComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-mat-select-search',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => MatSelectSearchComponent),\n        multi: true\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toggleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n  <mat-divider></mat-divider>\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n\\n\",\n      styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;left:0;width:100%;z-index:100;font-size:inherit;box-shadow:none}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-input{box-sizing:border-box;width:100%;border:none;font-family:inherit;font-size:inherit;color:currentColor;outline:none;background:none;padding:0 44px 0 16px;height:calc(3em - 1px);line-height:calc(3em - 1px)}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-inner-toggle-all .mat-select-search-input{padding-left:5px}.mat-select-search-no-entries-found{padding-top:8px}.mat-select-search-clear{position:absolute;right:4px;top:0}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search{position:sticky;top:-8px;z-index:1;opacity:1;margin-top:-8px;pointer-events:all}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search mat-pseudo-checkbox{display:none}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search .mdc-list-item__primary-text{opacity:1}.mat-select-search-toggle-all-checkbox{padding-left:5px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:5px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i10.MatSelect,\n      decorators: [{\n        type: Inject,\n        args: [MatSelect]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: i11.MatOption,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatOption]\n      }]\n    }, {\n      type: i12.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MatFormField]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECTSEARCH_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    placeholderLabel: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    closeIcon: [{\n      type: Input\n    }],\n    closeSvgIcon: [{\n      type: Input\n    }],\n    noEntriesFoundLabel: [{\n      type: Input\n    }],\n    clearSearchInput: [{\n      type: Input\n    }],\n    searching: [{\n      type: Input\n    }],\n    disableInitialFocus: [{\n      type: Input\n    }],\n    enableClearOnEscapePressed: [{\n      type: Input\n    }],\n    preventHomeEndKeyPropagation: [{\n      type: Input\n    }],\n    disableScrollToActiveOnOptionsChanged: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    showToggleAllCheckbox: [{\n      type: Input\n    }],\n    toggleAllCheckboxChecked: [{\n      type: Input\n    }],\n    toggleAllCheckboxIndeterminate: [{\n      type: Input\n    }],\n    toggleAllCheckboxTooltipMessage: [{\n      type: Input\n    }],\n    toggleAllCheckboxTooltipPosition: [{\n      type: Input\n    }],\n    hideClearSearchButton: [{\n      type: Input\n    }],\n    alwaysRestoreSelectedOptionsMulti: [{\n      type: Input\n    }],\n    toggleAll: [{\n      type: Output\n    }],\n    searchSelectInput: [{\n      type: ViewChild,\n      args: ['searchSelectInput', {\n        read: ElementRef,\n        static: true\n      }]\n    }],\n    innerSelectSearch: [{\n      type: ViewChild,\n      args: ['innerSelectSearch', {\n        read: ElementRef,\n        static: true\n      }]\n    }],\n    clearIcon: [{\n      type: ContentChild,\n      args: [MatSelectSearchClearDirective]\n    }],\n    noEntriesFound: [{\n      type: ContentChild,\n      args: [MatSelectNoEntriesFoundDirective]\n    }]\n  });\n})();\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MatSelectSearchVersion = '7.0.2';\n\nclass NgxMatSelectSearchModule {}\n\nNgxMatSelectSearchModule.ɵfac = function NgxMatSelectSearchModule_Factory(t) {\n  return new (t || NgxMatSelectSearchModule)();\n};\n\nNgxMatSelectSearchModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxMatSelectSearchModule\n});\nNgxMatSelectSearchModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule, MatDividerModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxMatSelectSearchModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule, MatDividerModule],\n      declarations: [MatSelectSearchComponent, MatSelectSearchClearDirective, MatSelectNoEntriesFoundDirective],\n      exports: [MatSelectSearchComponent, MatSelectSearchClearDirective, MatSelectNoEntriesFoundDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectNoEntriesFoundDirective, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions }; //# sourceMappingURL=ngx-mat-select-search.mjs.map","map":{"version":3,"names":["A","Z","ZERO","NINE","SPACE","HOME","END","ENTER","ESCAPE","UP_ARROW","DOWN_ARROW","i0","Directive","InjectionToken","EventEmitter","forwardRef","ElementRef","Component","ChangeDetectionStrategy","Inject","Optional","Input","Output","ViewChild","ContentChild","NgModule","i3","FormControl","NG_VALUE_ACCESSOR","ReactiveFormsModule","i11","MatOption","i12","MatFormField","i10","MatSelect","BehaviorSubject","of","combineLatest","Subject","switchMap","map","startWith","delay","takeUntil","take","tap","filter","i1","i2","CommonModule","i4","MatButtonModule","i5","MatCheckboxModule","i6","MatIconModule","i7","MatProgressSpinnerModule","i8","MatTooltipModule","i9","MatDividerModule","MatSelectSearchClearDirective","ɵfac","ɵdir","type","args","selector","configurableDefaultOptions","MAT_SELECTSEARCH_DEFAULT_OPTIONS","MatSelectNoEntriesFoundDirective","MatSelectSearchComponent","constructor","matSelect","changeDetectorRef","_viewportRuler","matOption","matFormField","defaultOptions","placeholderLabel","closeIcon","noEntriesFoundLabel","clearSearchInput","searching","disableInitialFocus","enableClearOnEscapePressed","preventHomeEndKeyPropagation","disableScrollToActiveOnOptionsChanged","ariaLabel","showToggleAllCheckbox","toggleAllCheckboxChecked","toggleAllCheckboxIndeterminate","toggleAllCheckboxTooltipMessage","toggleAllCheckboxTooltipPosition","hideClearSearchButton","alwaysRestoreSelectedOptionsMulti","toggleAll","onTouched","_","_options$","optionsList$","pipe","_options","changes","options","toArray","optionsLength$","length","_formControl","_showNoEntriesFound$","valueChanges","value","optionsLength","getOptionsLengthOffset","_onDestroy","applyDefaultOptions","next","getValue","key","hasOwnProperty","ngOnInit","disabled","_getHostElement","classList","add","setAttribute","console","error","openedChange","subscribe","opened","updateInputWidth","_focus","_reset","previousFirstOption","setTimeout","currentFirstOption","keyManager","_keyManager","panelOpen","firstOptionIsChanged","compareWith","activeItem","find","option","setFirstItemActive","showNoEntriesFound","remove","change","initMultipleHandling","markForCheck","_emitSelectAllBooleanToParent","state","emit","ngOnDestroy","complete","_isToggleAllCheckboxVisible","multiple","_handleKeydown","event","keyCode","stopPropagation","_handleKeyup","ariaActiveDescendantId","_getAriaActiveDescendant","index","findIndex","item","id","unselectActiveDescendant","activeDescendant","searchSelectInput","nativeElement","writeValue","_lastExternalInputValue","setValue","onBlur","registerOnChange","fn","undefined","registerOnTouched","panel","scrollTop","focus","ngControl","previousSelectedValues","values","restoreSelectedValues","Array","isArray","optionValues","forEach","previousValue","some","v","push","_onChange","innerSelectSearch","element","panelElement","parentElement","contains","style","width","clientWidth","_a","removeAttribute","ChangeDetectorRef","ViewportRuler","ɵcmp","provide","useExisting","multi","NgClass","NgIf","DefaultValueAccessor","NgControlStatus","FormControlDirective","MatIconButton","MatCheckbox","MatIcon","MatProgressSpinner","MatTooltip","MatDivider","AsyncPipe","providers","changeDetection","OnPush","template","styles","decorators","closeSvgIcon","read","static","clearIcon","noEntriesFound","MatSelectSearchVersion","NgxMatSelectSearchModule","ɵmod","ɵinj","imports","declarations","exports"],"sources":["C:/Users/КАА/source/repos/AngularApp2/node_modules/ngx-mat-select-search/fesm2015/ngx-mat-select-search.mjs"],"sourcesContent":["import { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i11 from '@angular/material/core';\nimport { MatOption } from '@angular/material/core';\nimport * as i12 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i10 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, tap, filter } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i5 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i8 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport * as i9 from '@angular/material/divider';\nimport { MatDividerModule } from '@angular/material/divider';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\nclass MatSelectSearchClearDirective {\n}\nMatSelectSearchClearDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatSelectSearchClearDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectSearchClearDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MatSelectSearchClearDirective, selector: \"[ngxMatSelectSearchClear]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatSelectSearchClearDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxMatSelectSearchClear]'\n                }]\n        }] });\n\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\nconst configurableDefaultOptions = [\n    'ariaLabel',\n    'clearSearchInput',\n    'closeIcon',\n    'closeSvgIcon',\n    'disableInitialFocus',\n    'disableScrollToActiveOnOptionsChanged',\n    'enableClearOnEscapePressed',\n    'hideClearSearchButton',\n    'noEntriesFoundLabel',\n    'placeholderLabel',\n    'preventHomeEndKeyPropagation',\n    'searching',\n];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\nconst MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n\n/**\n * Directive for providing a custom no entries found element.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <span ngxMatSelectNoEntriesFound>\n *     No entries found <button>Add</button>\n *   </span>\n * </ngx-mat-select-search>\n */\nclass MatSelectNoEntriesFoundDirective {\n}\nMatSelectNoEntriesFoundDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatSelectNoEntriesFoundDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectNoEntriesFoundDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MatSelectNoEntriesFoundDirective, selector: \"[ngxMatSelectNoEntriesFound]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatSelectNoEntriesFoundDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngxMatSelectNoEntriesFound]'\n                }]\n        }] });\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\nclass MatSelectSearchComponent {\n    constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, matFormField = null, defaultOptions) {\n        this.matSelect = matSelect;\n        this.changeDetectorRef = changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this.matOption = matOption;\n        this.matFormField = matFormField;\n        /** Label of the search placeholder */\n        this.placeholderLabel = 'Suche';\n        /** Type of the search input field */\n        this.type = 'text';\n        /** Font-based icon used for displaying Close-Icon */\n        this.closeIcon = 'close';\n        /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n        this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n        /**\n          * Whether or not the search field should be cleared after the dropdown menu is closed.\n          * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n          */\n        this.clearSearchInput = true;\n        /** Whether to show the search-in-progress indicator */\n        this.searching = false;\n        /** Disables initial focusing of the input field */\n        this.disableInitialFocus = false;\n        /** Enable clear input on escape pressed */\n        this.enableClearOnEscapePressed = false;\n        /**\n         * Prevents home / end key being propagated to mat-select,\n         * allowing to move the cursor within the search input instead of navigating the options\n         */\n        this.preventHomeEndKeyPropagation = false;\n        /** Disables scrolling to active options when option list changes. Useful for server-side search */\n        this.disableScrollToActiveOnOptionsChanged = false;\n        /** Adds 508 screen reader support for search box */\n        this.ariaLabel = 'dropdown search';\n        /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n        this.showToggleAllCheckbox = false;\n        /** select all checkbox checked state */\n        this.toggleAllCheckboxChecked = false;\n        /** select all checkbox indeterminate state */\n        this.toggleAllCheckboxIndeterminate = false;\n        /** Display a message in a tooltip on the toggle-all checkbox */\n        this.toggleAllCheckboxTooltipMessage = '';\n        /** Define the position of the tooltip on the toggle-all checkbox. */\n        this.toggleAllCheckboxTooltipPosition = 'below';\n        /** Show/Hide the search clear button of the search input */\n        this.hideClearSearchButton = false;\n        /**\n         * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n         * Defaults to false, so selected options are only restored while filtering is active.\n         */\n        this.alwaysRestoreSelectedOptionsMulti = false;\n        /** Output emitter to send to parent component with the toggle all boolean */\n        this.toggleAll = new EventEmitter();\n        this.onTouched = (_) => { };\n        this._options$ = new BehaviorSubject(null);\n        this.optionsList$ = this._options$.pipe(switchMap(_options => _options ?\n            _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n        this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n        this._formControl = new FormControl('');\n        /** whether to show the no entries found message */\n        this._showNoEntriesFound$ = combineLatest([\n            this._formControl.valueChanges,\n            this.optionsLength$\n        ]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value\n            && optionsLength === this.getOptionsLengthOffset()));\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        this.applyDefaultOptions(defaultOptions);\n    }\n    /** Current search value */\n    get value() {\n        return this._formControl.value;\n    }\n    /** Reference to the MatSelect options */\n    set _options(_options) {\n        this._options$.next(_options);\n    }\n    get _options() {\n        return this._options$.getValue();\n    }\n    applyDefaultOptions(defaultOptions) {\n        if (!defaultOptions) {\n            return;\n        }\n        for (const key of configurableDefaultOptions) {\n            if (defaultOptions.hasOwnProperty(key)) {\n                this[key] = defaultOptions[key];\n            }\n        }\n    }\n    ngOnInit() {\n        // set custom mat-option class if the component was placed inside a mat-option\n        if (this.matOption) {\n            this.matOption.disabled = true;\n            this.matOption._getHostElement().classList.add('contains-mat-select-search');\n            this.matOption._getHostElement().setAttribute('aria-hidden', 'true');\n        }\n        else {\n            console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n        }\n        // when the select dropdown panel is opened or closed\n        this.matSelect.openedChange\n            .pipe(delay(1), takeUntil(this._onDestroy))\n            .subscribe((opened) => {\n            if (opened) {\n                this.updateInputWidth();\n                // focus the search field when opening\n                if (!this.disableInitialFocus) {\n                    this._focus();\n                }\n            }\n            else {\n                // clear it when closing\n                if (this.clearSearchInput) {\n                    this._reset();\n                }\n            }\n        });\n        // set the first item active after the options changed\n        this.matSelect.openedChange\n            .pipe(take(1), switchMap((_) => {\n            this._options = this.matSelect.options;\n            // Closure variable for tracking the most recent first option.\n            // In order to avoid avoid causing the list to\n            // scroll to the top when options are added to the bottom of\n            // the list (eg: infinite scroll), we compare only\n            // the changes to the first options to determine if we\n            // should set the first item as active.\n            // This prevents unnecessary scrolling to the top of the list\n            // when options are appended, but allows the first item\n            // in the list to be set as active by default when there\n            // is no active selection\n            let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n            return this._options.changes\n                .pipe(tap(() => {\n                // avoid \"expression has been changed\" error\n                setTimeout(() => {\n                    // Convert the QueryList to an array\n                    const options = this._options.toArray();\n                    // The true first item is offset by 1\n                    const currentFirstOption = options[this.getOptionsLengthOffset()];\n                    const keyManager = this.matSelect._keyManager;\n                    if (keyManager && this.matSelect.panelOpen) {\n                        // set first item active and input width\n                        // Check to see if the first option in these changes is different from the previous.\n                        const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n                        // CASE: The first option is different now.\n                        // Indiciates we should set it as active and scroll to the top.\n                        if (firstOptionIsChanged\n                            || !keyManager.activeItem\n                            || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n                            keyManager.setFirstItemActive();\n                        }\n                        // wait for panel width changes\n                        setTimeout(() => {\n                            this.updateInputWidth();\n                        });\n                    }\n                    // Update our reference\n                    previousFirstOption = currentFirstOption;\n                });\n            }));\n        }))\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe();\n        // add or remove css class depending on whether to show the no entries found message\n        // note: this is hacky\n        this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n            // set no entries found class on mat option\n            if (this.matOption) {\n                if (showNoEntriesFound) {\n                    this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                }\n                else {\n                    this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                }\n            }\n        });\n        // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            if (this.matSelect.panelOpen) {\n                this.updateInputWidth();\n            }\n        });\n        this.initMultipleHandling();\n        this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            // update view when available options change\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n    _emitSelectAllBooleanToParent(state) {\n        this.toggleAll.emit(state);\n    }\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n    _isToggleAllCheckboxVisible() {\n        return this.matSelect.multiple && this.showToggleAllCheckbox;\n    }\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param event\n     */\n    _handleKeydown(event) {\n        // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n        if ((event.key && event.key.length === 1) ||\n            (event.keyCode >= A && event.keyCode <= Z) ||\n            (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n            (event.keyCode === SPACE)\n            || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))) {\n            event.stopPropagation();\n        }\n        if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n            // Regain focus after multiselect, so we can further type\n            setTimeout(() => this._focus());\n        }\n        // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n        if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n            this._reset(true);\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handles the key up event with MatSelect.\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n     */\n    _handleKeyup(event) {\n        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n            const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n            const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n            if (index !== -1) {\n                this.unselectActiveDescendant();\n                this.activeDescendant = this._options.toArray()[index]._getHostElement();\n                this.activeDescendant.setAttribute('aria-selected', 'true');\n                this.searchSelectInput.nativeElement.setAttribute('aria-activedescendant', ariaActiveDescendantId);\n            }\n        }\n    }\n    writeValue(value) {\n        this._lastExternalInputValue = value;\n        this._formControl.setValue(value);\n        this.changeDetectorRef.markForCheck();\n    }\n    onBlur() {\n        this.unselectActiveDescendant();\n        this.onTouched();\n    }\n    registerOnChange(fn) {\n        this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Focuses the search input field\n     */\n    _focus() {\n        if (!this.searchSelectInput || !this.matSelect.panel) {\n            return;\n        }\n        // save and restore scrollTop of panel, since it will be reset by focus()\n        // note: this is hacky\n        const panel = this.matSelect.panel.nativeElement;\n        const scrollTop = panel.scrollTop;\n        // focus\n        this.searchSelectInput.nativeElement.focus();\n        panel.scrollTop = scrollTop;\n    }\n    /**\n     * Resets the current search value\n     * @param focus whether to focus after resetting\n     */\n    _reset(focus) {\n        this._formControl.setValue('');\n        if (focus) {\n            this._focus();\n        }\n    }\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     */\n    initMultipleHandling() {\n        if (!this.matSelect.ngControl) {\n            if (this.matSelect.multiple) {\n                // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n                // is necessary to properly work in multi-selection mode.\n                console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n            }\n            return;\n        }\n        // if <mat-select [multiple]=\"true\">\n        // store previously selected values and restore them when they are deselected\n        // because the option is not available while we are currently filtering\n        this.previousSelectedValues = this.matSelect.ngControl.value;\n        this.matSelect.ngControl.valueChanges\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((values) => {\n            let restoreSelectedValues = false;\n            if (this.matSelect.multiple) {\n                if ((this.alwaysRestoreSelectedOptionsMulti || (this._formControl.value && this._formControl.value.length))\n                    && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n                    if (!values || !Array.isArray(values)) {\n                        values = [];\n                    }\n                    const optionValues = this.matSelect.options.map(option => option.value);\n                    this.previousSelectedValues.forEach(previousValue => {\n                        if (!values.some(v => this.matSelect.compareWith(v, previousValue))\n                            && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                            // if a value that was selected before is deselected and not found in the options, it was deselected\n                            // due to the filtering, so we restore it.\n                            values.push(previousValue);\n                            restoreSelectedValues = true;\n                        }\n                    });\n                }\n            }\n            this.previousSelectedValues = values;\n            if (restoreSelectedValues) {\n                this.matSelect._onChange(values);\n            }\n        });\n    }\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     */\n    updateInputWidth() {\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n            return;\n        }\n        let element = this.innerSelectSearch.nativeElement;\n        let panelElement;\n        while (element = element.parentElement) {\n            if (element.classList.contains('mat-select-panel')) {\n                panelElement = element;\n                break;\n            }\n        }\n        if (panelElement) {\n            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n        }\n    }\n    /**\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\n     */\n    getOptionsLengthOffset() {\n        if (this.matOption) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    unselectActiveDescendant() {\n        var _a;\n        (_a = this.activeDescendant) === null || _a === void 0 ? void 0 : _a.removeAttribute('aria-selected');\n        this.searchSelectInput.nativeElement.removeAttribute('aria-activedescendant');\n    }\n}\nMatSelectSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatSelectSearchComponent, deps: [{ token: MatSelect }, { token: i0.ChangeDetectorRef }, { token: i1.ViewportRuler }, { token: MatOption, optional: true }, { token: MatFormField, optional: true }, { token: MAT_SELECTSEARCH_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSelectSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.2\", type: MatSelectSearchComponent, selector: \"ngx-mat-select-search\", inputs: { placeholderLabel: \"placeholderLabel\", type: \"type\", closeIcon: \"closeIcon\", closeSvgIcon: \"closeSvgIcon\", noEntriesFoundLabel: \"noEntriesFoundLabel\", clearSearchInput: \"clearSearchInput\", searching: \"searching\", disableInitialFocus: \"disableInitialFocus\", enableClearOnEscapePressed: \"enableClearOnEscapePressed\", preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\", disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\", ariaLabel: \"ariaLabel\", showToggleAllCheckbox: \"showToggleAllCheckbox\", toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\", toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\", toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\", toggleAllCheckboxTooltipPosition: \"toggleAllCheckboxTooltipPosition\", hideClearSearchButton: \"hideClearSearchButton\", alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\" }, outputs: { toggleAll: \"toggleAll\" }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MatSelectSearchComponent),\n            multi: true\n        }\n    ], queries: [{ propertyName: \"clearIcon\", first: true, predicate: MatSelectSearchClearDirective, descendants: true }, { propertyName: \"noEntriesFound\", first: true, predicate: MatSelectNoEntriesFoundDirective, descendants: true }], viewQueries: [{ propertyName: \"searchSelectInput\", first: true, predicate: [\"searchSelectInput\"], descendants: true, read: ElementRef, static: true }, { propertyName: \"innerSelectSearch\", first: true, predicate: [\"innerSelectSearch\"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: \"<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toggleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n  <mat-divider></mat-divider>\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n\\n\", styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;left:0;width:100%;z-index:100;font-size:inherit;box-shadow:none}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-input{box-sizing:border-box;width:100%;border:none;font-family:inherit;font-size:inherit;color:currentColor;outline:none;background:none;padding:0 44px 0 16px;height:calc(3em - 1px);line-height:calc(3em - 1px)}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-inner-toggle-all .mat-select-search-input{padding-left:5px}.mat-select-search-no-entries-found{padding-top:8px}.mat-select-search-clear{position:absolute;right:4px;top:0}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search{position:sticky;top:-8px;z-index:1;opacity:1;margin-top:-8px;pointer-events:all}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search mat-pseudo-checkbox{display:none}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search .mdc-list-item__primary-text{opacity:1}.mat-select-search-toggle-all-checkbox{padding-left:5px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:5px}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.FormControlDirective, selector: \"[formControl]\", inputs: [\"formControl\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }, { kind: \"component\", type: i4.MatIconButton, selector: \"button[mat-icon-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }, { kind: \"component\", type: i5.MatCheckbox, selector: \"mat-checkbox\", inputs: [\"disableRipple\", \"color\", \"tabIndex\"], exportAs: [\"matCheckbox\"] }, { kind: \"component\", type: i6.MatIcon, selector: \"mat-icon\", inputs: [\"color\", \"inline\", \"svgIcon\", \"fontSet\", \"fontIcon\"], exportAs: [\"matIcon\"] }, { kind: \"component\", type: i7.MatProgressSpinner, selector: \"mat-progress-spinner, mat-spinner\", inputs: [\"color\", \"mode\", \"value\", \"diameter\", \"strokeWidth\"], exportAs: [\"matProgressSpinner\"] }, { kind: \"directive\", type: i8.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }, { kind: \"component\", type: i9.MatDivider, selector: \"mat-divider\", inputs: [\"vertical\", \"inset\"] }, { kind: \"pipe\", type: i2.AsyncPipe, name: \"async\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: MatSelectSearchComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-mat-select-search', providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MatSelectSearchComponent),\n                            multi: true\n                        }\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: \"<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toggleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input class=\\\"mat-select-search-input\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button *ngIf=\\\"!hideClearSearchButton && value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon [svgIcon]=\\\"closeSvgIcon\\\">\\n        {{!closeSvgIcon ? closeIcon : null}}\\n      </mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n  <mat-divider></mat-divider>\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  <ng-content *ngIf=\\\"noEntriesFound; else defaultNoEntriesFound\\\"\\n              select=\\\"[ngxMatSelectNoEntriesFound]\\\"></ng-content>\\n  <ng-template #defaultNoEntriesFound>{{noEntriesFoundLabel}}</ng-template>\\n</div>\\n\\n\", styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;left:0;width:100%;z-index:100;font-size:inherit;box-shadow:none}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-input{box-sizing:border-box;width:100%;border:none;font-family:inherit;font-size:inherit;color:currentColor;outline:none;background:none;padding:0 44px 0 16px;height:calc(3em - 1px);line-height:calc(3em - 1px)}:host-context([dir=rtl]) .mat-select-search-input{padding-right:16px;padding-left:44px}.mat-select-search-inner-toggle-all .mat-select-search-input{padding-left:5px}.mat-select-search-no-entries-found{padding-top:8px}.mat-select-search-clear{position:absolute;right:4px;top:0}:host-context([dir=rtl]) .mat-select-search-clear{right:auto;left:4px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .mat-select-search-spinner{right:auto;left:16px}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search{position:sticky;top:-8px;z-index:1;opacity:1;margin-top:-8px;pointer-events:all}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search mat-pseudo-checkbox{display:none}::ng-deep .mat-mdc-option[aria-disabled=true].contains-mat-select-search .mdc-list-item__primary-text{opacity:1}.mat-select-search-toggle-all-checkbox{padding-left:5px}:host-context([dir=rtl]) .mat-select-search-toggle-all-checkbox{padding-left:0;padding-right:5px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i10.MatSelect, decorators: [{\n                        type: Inject,\n                        args: [MatSelect]\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i1.ViewportRuler }, { type: i11.MatOption, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MatOption]\n                    }] }, { type: i12.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MatFormField]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SELECTSEARCH_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { placeholderLabel: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], closeIcon: [{\n                type: Input\n            }], closeSvgIcon: [{\n                type: Input\n            }], noEntriesFoundLabel: [{\n                type: Input\n            }], clearSearchInput: [{\n                type: Input\n            }], searching: [{\n                type: Input\n            }], disableInitialFocus: [{\n                type: Input\n            }], enableClearOnEscapePressed: [{\n                type: Input\n            }], preventHomeEndKeyPropagation: [{\n                type: Input\n            }], disableScrollToActiveOnOptionsChanged: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], showToggleAllCheckbox: [{\n                type: Input\n            }], toggleAllCheckboxChecked: [{\n                type: Input\n            }], toggleAllCheckboxIndeterminate: [{\n                type: Input\n            }], toggleAllCheckboxTooltipMessage: [{\n                type: Input\n            }], toggleAllCheckboxTooltipPosition: [{\n                type: Input\n            }], hideClearSearchButton: [{\n                type: Input\n            }], alwaysRestoreSelectedOptionsMulti: [{\n                type: Input\n            }], toggleAll: [{\n                type: Output\n            }], searchSelectInput: [{\n                type: ViewChild,\n                args: ['searchSelectInput', { read: ElementRef, static: true }]\n            }], innerSelectSearch: [{\n                type: ViewChild,\n                args: ['innerSelectSearch', { read: ElementRef, static: true }]\n            }], clearIcon: [{\n                type: ContentChild,\n                args: [MatSelectSearchClearDirective]\n            }], noEntriesFound: [{\n                type: ContentChild,\n                args: [MatSelectNoEntriesFoundDirective]\n            }] } });\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MatSelectSearchVersion = '7.0.2';\nclass NgxMatSelectSearchModule {\n}\nNgxMatSelectSearchModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatSelectSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxMatSelectSearchModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatSelectSearchModule, declarations: [MatSelectSearchComponent,\n        MatSelectSearchClearDirective,\n        MatSelectNoEntriesFoundDirective], imports: [CommonModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        MatTooltipModule,\n        MatDividerModule], exports: [MatSelectSearchComponent,\n        MatSelectSearchClearDirective,\n        MatSelectNoEntriesFoundDirective] });\nNgxMatSelectSearchModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatSelectSearchModule, imports: [CommonModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        MatTooltipModule,\n        MatDividerModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.2\", ngImport: i0, type: NgxMatSelectSearchModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        MatButtonModule,\n                        MatCheckboxModule,\n                        MatIconModule,\n                        MatProgressSpinnerModule,\n                        MatTooltipModule,\n                        MatDividerModule,\n                    ],\n                    declarations: [\n                        MatSelectSearchComponent,\n                        MatSelectSearchClearDirective,\n                        MatSelectNoEntriesFoundDirective\n                    ],\n                    exports: [\n                        MatSelectSearchComponent,\n                        MatSelectSearchClearDirective,\n                        MatSelectNoEntriesFoundDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectNoEntriesFoundDirective, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions };\n//# sourceMappingURL=ngx-mat-select-search.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}